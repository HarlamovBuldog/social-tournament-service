// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TournamentClient is the client API for Tournament service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TournamentClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	UserList(ctx context.Context, in *GetUserListRequest, opts ...grpc.CallOption) (*GetUserListResponse, error)
}

type tournamentClient struct {
	cc grpc.ClientConnInterface
}

func NewTournamentClient(cc grpc.ClientConnInterface) TournamentClient {
	return &tournamentClient{cc}
}

func (c *tournamentClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/main.Tournament/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentClient) UserList(ctx context.Context, in *GetUserListRequest, opts ...grpc.CallOption) (*GetUserListResponse, error) {
	out := new(GetUserListResponse)
	err := c.cc.Invoke(ctx, "/main.Tournament/UserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TournamentServer is the server API for Tournament service.
// All implementations must embed UnimplementedTournamentServer
// for forward compatibility
type TournamentServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	UserList(context.Context, *GetUserListRequest) (*GetUserListResponse, error)
	mustEmbedUnimplementedTournamentServer()
}

// UnimplementedTournamentServer must be embedded to have forward compatible implementations.
type UnimplementedTournamentServer struct {
}

func (UnimplementedTournamentServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedTournamentServer) UserList(context.Context, *GetUserListRequest) (*GetUserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserList not implemented")
}
func (UnimplementedTournamentServer) mustEmbedUnimplementedTournamentServer() {}

// UnsafeTournamentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TournamentServer will
// result in compilation errors.
type UnsafeTournamentServer interface {
	mustEmbedUnimplementedTournamentServer()
}

func RegisterTournamentServer(s grpc.ServiceRegistrar, srv TournamentServer) {
	s.RegisterService(&Tournament_ServiceDesc, srv)
}

func _Tournament_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Tournament/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tournament_UserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServer).UserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Tournament/UserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServer).UserList(ctx, req.(*GetUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tournament_ServiceDesc is the grpc.ServiceDesc for Tournament service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tournament_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.Tournament",
	HandlerType: (*TournamentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _Tournament_CreateUser_Handler,
		},
		{
			MethodName: "UserList",
			Handler:    _Tournament_UserList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tournament.proto",
}
